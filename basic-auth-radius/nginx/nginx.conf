# /etc/nginx/nginx.conf

# Set the user and group that Nginx should run as
user nginx;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Define your backend server
    upstream backend {
        server auth-backend:8000;
    }

    # Configure the server block to handle requests
    server {
        listen 80;
        server_name localhost;

        # Location for authentication endpoint
        location = /auth {
            # Define your custom auth backend service here (if needed)
            proxy_pass http://backend/auth;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_request_headers on;
        }

        # Location for your other application endpoints
        location / {
            # Perform the subrequest to /auth to check for authentication
            auth_request /auth;

            # Define the action to take based on the authentication result
            error_page 401 = @auth;

            # Proxy pass to your application if authenticated
            proxy_pass http://web;
            proxy_set_header Host $host;
            proxy_pass_request_headers on;
        }

        # Location to handle the authentication redirect
        location @auth {
            return 302 /auth;
        }
    }
}



# # /etc/nginx/nginx.conf

# # Set the user and group that Nginx should run as
# user nginx;
# worker_processes 1;

# events {
#     worker_connections 1024;
# }

# http {
#     # Define your backend server
#     upstream backend {
#         server auth-backend:8000;
#     }

#     # Configure the server block to handle requests
#     server {
#         listen 80;
#         server_name localhost;

#         location /auth {
#             proxy_pass http://auth-backend:8000/auth;
#             proxy_set_header Authorization $http_authorization;
#             proxy_pass_request_headers on;
#         }
#         location / {
#             proxy_pass http://web;
#             proxy_set_header Host $host;
#             proxy_pass_request_headers on;
#         }
#     }
# }